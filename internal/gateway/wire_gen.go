// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gateway

import (
	"github.com/onexstack/onex/internal/gateway/biz"
	"github.com/onexstack/onex/internal/gateway/handler"
	"github.com/onexstack/onex/internal/gateway/pkg/validation"
	"github.com/onexstack/onex/internal/gateway/store"
	"github.com/onexstack/onex/internal/pkg/client/usercenter"
	"github.com/onexstack/onex/internal/pkg/idempotent"
	"github.com/onexstack/onex/pkg/generated/clientset/versioned"
	"github.com/onexstack/onexstack/pkg/db"
	"github.com/onexstack/onexstack/pkg/server"
	validation2 "github.com/onexstack/onexstack/pkg/validation"
)

// Injectors from wire.go:

func InitializeWebServer(arg <-chan struct{}, config *Config, versionedInterface versioned.Interface, mySQLOptions *db.MySQLOptions, redisOptions *db.RedisOptions) (server.Server, error) {
	etcdOptions := config.EtcdOptions
	registrar := server.NewEtcdRegistrar(etcdOptions)
	kratosAppConfig := ProvideKratosAppConfig(registrar)
	gormDB, err := db.NewMySQL(mySQLOptions)
	if err != nil {
		return nil, err
	}
	datastore := store.NewStore(gormDB)
	sharedInformerFactory, err := createInformers(arg, versionedInterface)
	if err != nil {
		return nil, err
	}
	bizBiz := biz.NewBiz(datastore, versionedInterface, sharedInformerFactory)
	client, err := db.NewRedis(redisOptions)
	if err != nil {
		return nil, err
	}
	idempotentIdempotent, err := idempotent.NewIdempotent(client)
	if err != nil {
		return nil, err
	}
	handlerHandler := handler.NewHandler(bizBiz, idempotentIdempotent)
	logger := ProvideKratosLogger()
	userCenterOptions := config.UserCenterOptions
	impl := usercenter.NewUserCenter(userCenterOptions, etcdOptions)
	validator := validation.New(datastore)
	validationValidator := validation2.NewValidator(validator)
	v := NewMiddlewares(logger, idempotentIdempotent, impl, validationValidator)
	serverConfig := &ServerConfig{
		cfg:         config,
		appConfig:   kratosAppConfig,
		handler:     handlerHandler,
		middlewares: v,
	}
	serverServer, err := NewWebServer(serverConfig)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}
