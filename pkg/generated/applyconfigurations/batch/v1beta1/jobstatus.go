// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/onex.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1beta1

import (
	batchv1beta1 "github.com/onexstack/onex/pkg/apis/batch/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// JobStatusApplyConfiguration represents a declarative configuration of the JobStatus type for use
// with apply.
type JobStatusApplyConfiguration struct {
	Conditions     []JobConditionApplyConfiguration `json:"conditions,omitempty"`
	StartedAt      *v1.Time                         `json:"startedAt,omitempty"`
	EndedAt        *v1.Time                         `json:"endedAt,omitempty"`
	Phase          *batchv1beta1.JobPhase           `json:"phase,omitempty"`
	ErrorMessage   *string                          `json:"errorMessage,omitempty"`
	ProviderStatus *runtime.RawExtension            `json:"providerStatus,omitempty"`
}

// JobStatusApplyConfiguration constructs a declarative configuration of the JobStatus type for use with
// apply.
func JobStatus() *JobStatusApplyConfiguration {
	return &JobStatusApplyConfiguration{}
}

// WithConditions adds the given value to the Conditions field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Conditions field.
func (b *JobStatusApplyConfiguration) WithConditions(values ...*JobConditionApplyConfiguration) *JobStatusApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithConditions")
		}
		b.Conditions = append(b.Conditions, *values[i])
	}
	return b
}

// WithStartedAt sets the StartedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the StartedAt field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithStartedAt(value v1.Time) *JobStatusApplyConfiguration {
	b.StartedAt = &value
	return b
}

// WithEndedAt sets the EndedAt field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the EndedAt field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithEndedAt(value v1.Time) *JobStatusApplyConfiguration {
	b.EndedAt = &value
	return b
}

// WithPhase sets the Phase field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Phase field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithPhase(value batchv1beta1.JobPhase) *JobStatusApplyConfiguration {
	b.Phase = &value
	return b
}

// WithErrorMessage sets the ErrorMessage field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ErrorMessage field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithErrorMessage(value string) *JobStatusApplyConfiguration {
	b.ErrorMessage = &value
	return b
}

// WithProviderStatus sets the ProviderStatus field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ProviderStatus field is set to the value of the last call.
func (b *JobStatusApplyConfiguration) WithProviderStatus(value runtime.RawExtension) *JobStatusApplyConfiguration {
	b.ProviderStatus = &value
	return b
}
