// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	corev1 "github.com/onexstack/onex/pkg/generated/applyconfigurations/core/v1"
	typedcorev1 "github.com/onexstack/onex/pkg/generated/clientset/versioned/typed/core/v1"
	v1 "k8s.io/api/core/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeNamespaces implements NamespaceInterface
type fakeNamespaces struct {
	*gentype.FakeClientWithListAndApply[*v1.Namespace, *v1.NamespaceList, *corev1.NamespaceApplyConfiguration]
	Fake *FakeCoreV1
}

func newFakeNamespaces(fake *FakeCoreV1) typedcorev1.NamespaceInterface {
	return &fakeNamespaces{
		gentype.NewFakeClientWithListAndApply[*v1.Namespace, *v1.NamespaceList, *corev1.NamespaceApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("namespaces"),
			v1.SchemeGroupVersion.WithKind("Namespace"),
			func() *v1.Namespace { return &v1.Namespace{} },
			func() *v1.NamespaceList { return &v1.NamespaceList{} },
			func(dst, src *v1.NamespaceList) { dst.ListMeta = src.ListMeta },
			func(list *v1.NamespaceList) []*v1.Namespace { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.NamespaceList, items []*v1.Namespace) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}

// Finalize takes the representation of a namespace to update.  Returns the server's representation of the namespace, and an error, if it occurs.
func (c *FakeNamespaces) Finalize(ctx context.Context, namespace *v1.Namespace, opts metav1.UpdateOptions) (result *v1.Namespace, err error) {
	return nil, nil
}
