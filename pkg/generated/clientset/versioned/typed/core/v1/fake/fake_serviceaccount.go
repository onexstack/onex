// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	corev1 "github.com/onexstack/onex/pkg/generated/applyconfigurations/core/v1"
	typedcorev1 "github.com/onexstack/onex/pkg/generated/clientset/versioned/typed/core/v1"
	authenticationv1 "k8s.io/api/authentication/v1"
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeServiceAccounts implements ServiceAccountInterface
type fakeServiceAccounts struct {
	*gentype.FakeClientWithListAndApply[*v1.ServiceAccount, *v1.ServiceAccountList, *corev1.ServiceAccountApplyConfiguration]
	Fake *FakeCoreV1
}

func newFakeServiceAccounts(fake *FakeCoreV1, namespace string) typedcorev1.ServiceAccountInterface {
	return &fakeServiceAccounts{
		gentype.NewFakeClientWithListAndApply[*v1.ServiceAccount, *v1.ServiceAccountList, *corev1.ServiceAccountApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("serviceaccounts"),
			v1.SchemeGroupVersion.WithKind("ServiceAccount"),
			func() *v1.ServiceAccount { return &v1.ServiceAccount{} },
			func() *v1.ServiceAccountList { return &v1.ServiceAccountList{} },
			func(dst, src *v1.ServiceAccountList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ServiceAccountList) []*v1.ServiceAccount { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.ServiceAccountList, items []*v1.ServiceAccount) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}

// CreateToken takes the representation of a tokenRequest and creates it.  Returns the server's representation of the tokenRequest, and an error, if there is any.
func (c *fakeServiceAccounts) CreateToken(ctx context.Context, serviceAccountName string, tokenRequest *authenticationv1.TokenRequest, opts metav1.CreateOptions) (result *authenticationv1.TokenRequest, err error) {
	emptyResult := &authenticationv1.TokenRequest{}
	obj, err := c.Fake.
		Invokes(testing.NewCreateSubresourceActionWithOptions(c.Resource(), serviceAccountName, "token", c.Namespace(), tokenRequest, opts), emptyResult)

	if obj == nil {
		return emptyResult, err
	}
	return obj.(*authenticationv1.TokenRequest), err
}
