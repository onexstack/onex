// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for
// this file is https://github.com/onexstack/onex.

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	coordinationv1 "github.com/onexstack/onex/pkg/generated/applyconfigurations/coordination/v1"
	typedcoordinationv1 "github.com/onexstack/onex/pkg/generated/clientset/versioned/typed/coordination/v1"
	v1 "k8s.io/api/coordination/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeLeases implements LeaseInterface
type fakeLeases struct {
	*gentype.FakeClientWithListAndApply[*v1.Lease, *v1.LeaseList, *coordinationv1.LeaseApplyConfiguration]
	Fake *FakeCoordinationV1
}

func newFakeLeases(fake *FakeCoordinationV1, namespace string) typedcoordinationv1.LeaseInterface {
	return &fakeLeases{
		gentype.NewFakeClientWithListAndApply[*v1.Lease, *v1.LeaseList, *coordinationv1.LeaseApplyConfiguration](
			fake.Fake,
			namespace,
			v1.SchemeGroupVersion.WithResource("leases"),
			v1.SchemeGroupVersion.WithKind("Lease"),
			func() *v1.Lease { return &v1.Lease{} },
			func() *v1.LeaseList { return &v1.LeaseList{} },
			func(dst, src *v1.LeaseList) { dst.ListMeta = src.ListMeta },
			func(list *v1.LeaseList) []*v1.Lease { return gentype.ToPointerSlice(list.Items) },
			func(list *v1.LeaseList, items []*v1.Lease) { list.Items = gentype.FromPointerSlice(items) },
		),
		fake,
	}
}
