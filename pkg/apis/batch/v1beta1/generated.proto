// Copyright 2022 Lingfei Kong <colin404@foxmail.com>. All rights reserved.
// Use of this source code is governed by a MIT style
// license that can be found in the LICENSE file. The original repo for 
// this file is https://github.com/onexstack/onex.


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.onexstack.onex.pkg.apis.batch.v1beta1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/onexstack/onex/pkg/apis/batch/v1beta1";

// CronJob represents the configuration of a single cron job.
message CronJob {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of a cron job, including the schedule.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional CronJobSpec spec = 2;

  // Current status of a cron job.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional CronJobStatus status = 3;
}

// CronJobList is a collection of cron jobs.
message CronJobList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of CronJobs.
  repeated CronJob items = 2;
}

// CronJobSpec describes how the job execution will look like and when it will actually run.
message CronJobSpec {
  // The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
  optional string schedule = 1;

  // The time zone name for the given schedule, see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones.
  // If not specified, this will default to the time zone of the kube-controller-manager process.
  // The set of valid time zone names and the time zone offset is loaded from the system-wide time zone
  // database by the API server during CronJob validation and the controller manager during execution.
  // If no system-wide time zone database can be found a bundled version of the database is used instead.
  // If the time zone name becomes invalid during the lifetime of a CronJob or due to a change in host
  // configuration, the controller will stop creating new new Jobs and will create a system event with the
  // reason UnknownTimeZone.
  // More information can be found in https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#time-zones
  // +optional
  optional string timeZone = 8;

  // Optional deadline in seconds for starting the job if it misses scheduled
  // time for any reason.  Missed jobs executions will be counted as failed ones.
  // +optional
  optional int64 startingDeadlineSeconds = 2;

  // Specifies how to treat concurrent executions of a Job.
  // Valid values are:
  //
  // - "Allow" (default): allows CronJobs to run concurrently;
  // - "Forbid": forbids concurrent runs, skipping next run if previous run hasn't finished yet;
  // - "Replace": cancels currently running job and replaces it with a new one
  // +optional
  optional string concurrencyPolicy = 3;

  // This flag tells the controller to suspend subsequent executions, it does
  // not apply to already started executions.  Defaults to false.
  // +optional
  optional bool suspend = 4;

  // Specifies the job that will be created when executing a CronJob.
  optional JobTemplateSpec jobTemplate = 5;

  // The number of successful finished jobs to retain. Value must be non-negative integer.
  // Defaults to 3.
  // +optional
  optional int32 successfulJobsHistoryLimit = 6;

  // The number of failed finished jobs to retain. Value must be non-negative integer.
  // Defaults to 1.
  // +optional
  optional int32 failedJobsHistoryLimit = 7;
}

// CronJobStatus represents the current state of a cron job.
message CronJobStatus {
  // A list of pointers to currently running jobs.
  // +optional
  // +listType=atomic
  repeated .k8s.io.api.core.v1.ObjectReference active = 1;

  // Information when was the last time the job was successfully scheduled.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastScheduleTime = 4;

  // Information when was the last time the job successfully completed.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastSuccessfulTime = 5;
}

// Job represents the configuration of a single job.
message Job {
  // Standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of a job.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional JobSpec spec = 2;

  // Current status of a job.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional JobStatus status = 3;
}

// JobCondition describes current state of a job.
message JobCondition {
  // Type of job condition, Complete or Failed.
  optional string type = 1;

  // Status of the condition, one of True, False, Unknown.
  optional string status = 2;

  // Last time the condition was checked.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastProbeTime = 3;

  // Last time the condition transit from one status to another.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 4;

  // (brief) reason for the condition's last transition.
  // +optional
  optional string reason = 5;

  // Human readable message indicating details about last transition.
  // +optional
  optional string message = 6;
}

// JobList is a collection of jobs.
message JobList {
  // Standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // items is the list of Jobs.
  repeated Job items = 2;
}

// JobSpec describes how the job execution will look like.
message JobSpec {
  // 如 "kubernetes" | "aws-batch" | "spark-on-yarn" …
  optional string type = 18;

  // suspend specifies whether the Job controller should create Pods or not. If
  // a Job is created with suspend set to true, no Pods are created by the Job
  // controller. If a Job is suspended after creation (i.e. the flag goes from
  // false to true), the Job controller will delete all active Pods associated
  // with this Job. Users must design their workload to gracefully handle this.
  // Suspending a Job will reset the StartTime field of the Job, effectively
  // resetting the ActiveDeadlineSeconds timer too. Defaults to false.
  //
  // +optional
  optional bool suspend = 10;

  // Specifies the duration in seconds relative to the startTime that the job
  // may be continuously active before the system tries to terminate it; value
  // must be positive integer. If a Job is suspended (at creation or through an
  // update), this timer will effectively be stopped and reset when the Job is
  // resumed again.
  // +optional
  optional int64 activeDeadlineSeconds = 3;

  // providerSpec details Provider-specific configuration to use during node creation.
  // +optional
  optional ProviderSpec providerSpec = 17;
}

// JobStatus represents the current state of a Job.
message JobStatus {
  // The latest available observations of an object's current state. When a Job
  // fails, one of the conditions will have type "Failed" and status true. When
  // a Job is suspended, one of the conditions will have type "Suspended" and
  // status true; when the Job is resumed, the status of this condition will
  // become false. When a Job is completed, one of the conditions will have
  // type "Complete" and status true.
  //
  // A job is considered finished when it is in a terminal condition, either
  // "Complete" or "Failed". A Job cannot have both the "Complete" and "Failed" conditions.
  // Additionally, it cannot be in the "Complete" and "FailureTarget" conditions.
  // The "Complete", "Failed" and "FailureTarget" conditions cannot be disabled.
  //
  // More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
  // +optional
  // +patchMergeKey=type
  // +patchStrategy=merge
  // +listType=atomic
  repeated JobCondition conditions = 1;

  // Represents time when the job controller started processing a job. When a
  // Job is created in the suspended state, this field is not set until the
  // first time it is resumed. This field is reset every time a Job is resumed
  // from suspension. It is represented in RFC3339 form and is in UTC.
  //
  // Once set, the field can only be removed when the job is suspended.
  // The field cannot be modified while the job is unsuspended or finished.
  //
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time startedAt = 2;

  // Represents time when the job was completed. It is not guaranteed to
  // be set in happens-before order across separate operations.
  // It is represented in RFC3339 form and is in UTC.
  // The completion time is set when the job finishes successfully, and only then.
  // The value cannot be updated or removed. The value indicates the same or
  // later point in time as the startTime field.
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.Time endedAt = 3;

  optional string phase = 4;

  // errorMessage will be set in the event that there is a terminal problem
  // reconciling the Machine and will contain a more verbose string suitable
  // for logging and human consumption.
  //
  // This field should not be set for transitive errors that a controller
  // faces that are expected to be fixed automatically over
  // time (like service outages), but instead indicate that something is
  // fundamentally wrong with the Machine's spec or the configuration of
  // the controller, and that manual intervention is required. Examples
  // of terminal errors would be invalid combinations of settings in the
  // spec, values that are unsupported by the controller, or the
  // responsible controller itself being critically misconfigured.
  //
  // Any transient errors that occur during the reconciliation of Machines
  // can be added as events to the Machine object and/or logged in the
  // controller's output.
  // +optional
  optional string errorMessage = 6;

  // providerStatus details a Provider-specific status.
  // It is recommended that providers maintain their
  // own versioned API types that should be
  // serialized/deserialized from this field.
  // +optional
  // +kubebuilder:validation:XPreserveUnknownFields
  optional .k8s.io.apimachinery.pkg.runtime.RawExtension providerStatus = 5;
}

// JobTemplateSpec describes the data a Job should have when created from a template
message JobTemplateSpec {
  // Standard object's metadata of the jobs created from this template.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
  // +optional
  optional .k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // Specification of the desired behavior of the job.
  // More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
  // +optional
  optional JobSpec spec = 2;
}

// ProviderSpec defines the configuration to use during node creation.
message ProviderSpec {
  // value is an inlined, serialized representation of the resource
  // configuration. It is recommended that providers maintain their own
  // versioned API types that should be serialized/deserialized from this
  // field, akin to component config.
  // +optional
  // +kubebuilder:validation:XPreserveUnknownFields
  optional .k8s.io.apimachinery.pkg.runtime.RawExtension value = 1;
}

