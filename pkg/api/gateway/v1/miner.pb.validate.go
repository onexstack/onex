// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: gateway/v1/miner.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Miner with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Miner) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Miner with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MinerMultiError, or nil if none found.
func (m *Miner) ValidateAll() error {
	return m.validate(true)
}

func (m *Miner) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for MinerType

	// no validation rules for ChainName

	// no validation rules for DataDir

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinerValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinerValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinerValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MinerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MinerValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MinerValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MinerMultiError(errors)
	}

	return nil
}

// MinerMultiError is an error wrapping multiple validation errors returned by
// Miner.ValidateAll() if the designated constraints aren't met.
type MinerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MinerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MinerMultiError) AllErrors() []error { return m }

// MinerValidationError is the validation error returned by Miner.Validate if
// the designated constraints aren't met.
type MinerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MinerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MinerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MinerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MinerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MinerValidationError) ErrorName() string { return "MinerValidationError" }

// Error satisfies the builtin error interface
func (e MinerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMiner.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MinerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MinerValidationError{}

// Validate checks the field values on CreateMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMinerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMinerRequestMultiError, or nil if none found.
func (m *CreateMinerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMinerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DisplayName

	// no validation rules for MinerType

	// no validation rules for ChainName

	// no validation rules for DataDir

	if len(errors) > 0 {
		return CreateMinerRequestMultiError(errors)
	}

	return nil
}

// CreateMinerRequestMultiError is an error wrapping multiple validation errors
// returned by CreateMinerRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateMinerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMinerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMinerRequestMultiError) AllErrors() []error { return m }

// CreateMinerRequestValidationError is the validation error returned by
// CreateMinerRequest.Validate if the designated constraints aren't met.
type CreateMinerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMinerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMinerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMinerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMinerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMinerRequestValidationError) ErrorName() string {
	return "CreateMinerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMinerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMinerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMinerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMinerRequestValidationError{}

// Validate checks the field values on UpdateMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMinerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMinerRequestMultiError, or nil if none found.
func (m *UpdateMinerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMinerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if m.DisplayName != nil {
		// no validation rules for DisplayName
	}

	if m.DeletePolicy != nil {
		// no validation rules for DeletePolicy
	}

	if len(errors) > 0 {
		return UpdateMinerRequestMultiError(errors)
	}

	return nil
}

// UpdateMinerRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateMinerRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateMinerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMinerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMinerRequestMultiError) AllErrors() []error { return m }

// UpdateMinerRequestValidationError is the validation error returned by
// UpdateMinerRequest.Validate if the designated constraints aren't met.
type UpdateMinerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMinerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMinerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMinerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMinerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMinerRequestValidationError) ErrorName() string {
	return "UpdateMinerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMinerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMinerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMinerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMinerRequestValidationError{}

// Validate checks the field values on DeleteMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMinerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMinerRequestMultiError, or nil if none found.
func (m *DeleteMinerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMinerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteMinerRequestMultiError(errors)
	}

	return nil
}

// DeleteMinerRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteMinerRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteMinerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMinerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMinerRequestMultiError) AllErrors() []error { return m }

// DeleteMinerRequestValidationError is the validation error returned by
// DeleteMinerRequest.Validate if the designated constraints aren't met.
type DeleteMinerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMinerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMinerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMinerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMinerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMinerRequestValidationError) ErrorName() string {
	return "DeleteMinerRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMinerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMinerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMinerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMinerRequestValidationError{}

// Validate checks the field values on DeleteMinerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMinerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMinerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMinerResponseMultiError, or nil if none found.
func (m *DeleteMinerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMinerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteMinerResponseMultiError(errors)
	}

	return nil
}

// DeleteMinerResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMinerResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMinerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMinerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMinerResponseMultiError) AllErrors() []error { return m }

// DeleteMinerResponseValidationError is the validation error returned by
// DeleteMinerResponse.Validate if the designated constraints aren't met.
type DeleteMinerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMinerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMinerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMinerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMinerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMinerResponseValidationError) ErrorName() string {
	return "DeleteMinerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMinerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMinerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMinerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMinerResponseValidationError{}

// Validate checks the field values on GetMinerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMinerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMinerRequestMultiError, or nil if none found.
func (m *GetMinerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMinerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetMinerRequestMultiError(errors)
	}

	return nil
}

// GetMinerRequestMultiError is an error wrapping multiple validation errors
// returned by GetMinerRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMinerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMinerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMinerRequestMultiError) AllErrors() []error { return m }

// GetMinerRequestValidationError is the validation error returned by
// GetMinerRequest.Validate if the designated constraints aren't met.
type GetMinerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMinerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMinerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMinerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMinerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMinerRequestValidationError) ErrorName() string { return "GetMinerRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMinerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMinerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMinerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMinerRequestValidationError{}

// Validate checks the field values on GetMinerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMinerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMinerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMinerResponseMultiError, or nil if none found.
func (m *GetMinerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMinerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMiner()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMinerResponseValidationError{
					field:  "Miner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMinerResponseValidationError{
					field:  "Miner",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMiner()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMinerResponseValidationError{
				field:  "Miner",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMinerResponseMultiError(errors)
	}

	return nil
}

// GetMinerResponseMultiError is an error wrapping multiple validation errors
// returned by GetMinerResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMinerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMinerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMinerResponseMultiError) AllErrors() []error { return m }

// GetMinerResponseValidationError is the validation error returned by
// GetMinerResponse.Validate if the designated constraints aren't met.
type GetMinerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMinerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMinerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMinerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMinerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMinerResponseValidationError) ErrorName() string { return "GetMinerResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMinerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMinerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMinerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMinerResponseValidationError{}

// Validate checks the field values on ListMinerRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMinerRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMinerRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMinerRequestMultiError, or nil if none found.
func (m *ListMinerRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMinerRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Offset

	// no validation rules for Limit

	if len(errors) > 0 {
		return ListMinerRequestMultiError(errors)
	}

	return nil
}

// ListMinerRequestMultiError is an error wrapping multiple validation errors
// returned by ListMinerRequest.ValidateAll() if the designated constraints
// aren't met.
type ListMinerRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMinerRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMinerRequestMultiError) AllErrors() []error { return m }

// ListMinerRequestValidationError is the validation error returned by
// ListMinerRequest.Validate if the designated constraints aren't met.
type ListMinerRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMinerRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMinerRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMinerRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMinerRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMinerRequestValidationError) ErrorName() string { return "ListMinerRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListMinerRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMinerRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMinerRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMinerRequestValidationError{}

// Validate checks the field values on ListMinerResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListMinerResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMinerResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMinerResponseMultiError, or nil if none found.
func (m *ListMinerResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMinerResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetMiners() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMinerResponseValidationError{
						field:  fmt.Sprintf("Miners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMinerResponseValidationError{
						field:  fmt.Sprintf("Miners[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMinerResponseValidationError{
					field:  fmt.Sprintf("Miners[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListMinerResponseMultiError(errors)
	}

	return nil
}

// ListMinerResponseMultiError is an error wrapping multiple validation errors
// returned by ListMinerResponse.ValidateAll() if the designated constraints
// aren't met.
type ListMinerResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMinerResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMinerResponseMultiError) AllErrors() []error { return m }

// ListMinerResponseValidationError is the validation error returned by
// ListMinerResponse.Validate if the designated constraints aren't met.
type ListMinerResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMinerResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMinerResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMinerResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMinerResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMinerResponseValidationError) ErrorName() string {
	return "ListMinerResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMinerResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMinerResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMinerResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMinerResponseValidationError{}
